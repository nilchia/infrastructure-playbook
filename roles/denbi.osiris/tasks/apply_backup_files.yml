---
- name: "Restore MongoDB backup"
  ansible.builtin.command: "mongorestore --drop --nsInclude '{{ mongo_dbname }}.*' 'mongodb://{{ mongo_user }}:{{ mongo_passwd }}@localhost/{{ mongo_dbname }}' '{{ backup_restore_dir }}/{{ mongo_dbname }}'"

- name: "Delete any old OSIRIS folder"
  ansible.builtin.file:
    path: "{{ osiris_www_dir }}_old"
    state: absent

- name: "Register if destination dir exists"
  ansible.builtin.stat:
    path: "{{ osiris_www_dir }}"
  register: osiris_www

- name: "Ensure clean slate for OSIRIS PHP files"
  ansible.builtin.command:
    cmd: "mv {{ osiris_www_dir }} {{ osiris_www_dir }}_old"
    creates: "{{ osiris_www_dir }}_old"
  when: osiris_www.stat.exists

- name: "Restore OSIRIS PHP files"
  ansible.builtin.command:
    cmd: "mv {{ backup_restore_dir }}/osiris {{ osiris_www_dir }}"
    creates: "{{ osiris_www_dir }}"

- name: "Ensure permissions for OSIRIS PHP files"
  ansible.builtin.file:
    path: "{{ osiris_www_dir }}"
    owner: "apache"
    group: "apache"
    mode: "u=rwX,g=rwX,o="
    recurse: true
    state: directory

- name: "Ensure OSIRIS DB_NAME is defined"
  lineinfile:
    path: "{{ osiris_config_file }}"
    regexp: '^define\("DB_NAME",'
    line: 'define("DB_NAME", "{{ mongo_dbname }}");'
    state: present

- name: "Ensure OSIRIS connection string is correct"
  lineinfile:
    path: "{{ osiris_config_file }}"
    regexp: '^define\("DB_STRING",'
    line: 'define("DB_STRING", "{{ mongo_connection }}");' 
    state: present

- name: Remove default ssl vhost configurations
  replace:
    dest: "{{ apache_conf_path }}/ssl.conf"
    regexp: "##\\n##\\s*SSL Virtual Host Context(.*\\n)*</VirtualHost>"
  notify: restart apache
